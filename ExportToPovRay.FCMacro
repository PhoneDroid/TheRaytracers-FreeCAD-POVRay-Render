from PySide import QtGui

def main():
    firstLayer = []
    doc = FreeCAD.ActiveDocument
    objs = doc.Objects
    finalPovCode = """
    #version 3.6; // 3.7
    global_settings{assumed_gamma 1.0}
    #default{ finish{ ambient 0.1 diffuse 0.9 }}
    //------------------------------------------
    #include "colors.inc"
    #include "textures.inc"
    //------------------------------------------
    // camera ----------------------------------
    camera{ location  <50.0 , 50.0 ,-50.0>
            look_at   <0.0 , 1.0 , 0.0>
            right x*image_width/image_height
            angle 75 }
    // sun -------------------------------------
    light_source{<1500,3000,-2500> color White}
    // sky -------------------------------------
    plane{ <0,1,0>,1 hollow
           texture{
             pigment{ bozo turbulence 0.92
               color_map{
                     [0.00 rgb<0.05,0.15,0.45>]
                     [0.50 rgb<0.05,0.15,0.45>]
                     [0.70 rgb<1,1,1>        ]
                     [0.85 rgb<0.2,0.2,0.2>  ]
                     [1.00 rgb<0.5,0.5,0.5>  ]
                           } //
               scale<1,1,1.5>*2.5
               translate<0,0,0>
               } // end of pigment
             finish {ambient 1 diffuse 0}
            } // end of texture
           scale 10000}
    // ground ----------------------------------
    plane{ <0,1,0>, 0
           texture{
              pigment{ color rgb<0.22,0.45,0>}
              normal { bumps 0.75 scale 0.015 }
              finish { phong 0.1 }
           } // end of texture
         } // end of plane

box{<0,0,0> <100, 1,1>
pigment{
                        color rgb<1,0,0>
                        scale <1.0, 1.0, 1.0>
                    }
}
box{<0,0,0> <1, 100,1>
pigment{
                        color rgb<0,0,1>
                        scale <1.0, 1.0, 1.0>
                    }
}
box{<0,0,0> <1, 1,100>
pigment{
                        color rgb<1,1,1>
                        scale <1.0, 1.0, 1.0>
                    }
}
    //------------------------------------------
    // objects in scene ------------------------
    """

    #print informations about the objects
    for obj in objs:
        App.Console.PrintMessage(str(obj.TypeId) + " - ")
        App.Console.PrintMessage(str(obj.Name) + "\n")
        for child in obj.OutList:
            App.Console.PrintMessage("Childs\n")
            App.Console.PrintMessage("   - " + str(child.TypeId) + " - ")
            App.Console.PrintMessage(str(child.Name) + "\n")
        for parent in obj.InList:
            App.Console.PrintMessage("Parent\n")
            App.Console.PrintMessage("   -" + str(parent.TypeId) + " - ")
            App.Console.PrintMessage("   -" + str(parent.Name) + "\n\n\n")

    #get the first layer
    for obj in objs:
        if obj.InList == []: #no parents
            firstLayer.append(obj)

    #create the povray code
    for obj in firstLayer:
        finalPovCode += createPovrayCode(obj)

    #App.Console.PrintMessage("\n\n" + str(firstLayer[0].TypeId) + "\n\n")
    App.Console.PrintMessage("\n\n" + finalPovCode)
    writeFile(finalPovCode)

def createPovrayCode(fcObj): #returns the povray code for the object
    povCode = ""

    if fcObj.TypeId == "Part::Box": #Box
        x1 = fcObj.Placement.Base.x
        z1 = fcObj.Placement.Base.y
        y1 = fcObj.Placement.Base.z
        x2 = fcObj.Placement.Base.x + int(fcObj.Length)
        z2 = fcObj.Placement.Base.y + int(fcObj.Width)
        y2 = fcObj.Placement.Base.z + int(fcObj.Height)

        povBox = "box{ <"
        povBox += str(x1) + "," + str(y1) + "," + str(z1) + ">, <" + str(x2) + "," + str(y2) + "," + str(z2) + ">\n"
        pigment = """
                    pigment{ checker
                        color rgb<1,1,1>
                        color rgb<1,1,1>*0
                        scale <1.0, 1.0, 1.0>
                    }\n\n"""

        rotate = "translate -<" + str(x1) + "," + str(y1) + "," + str(z1) + ">\n"
        rotate += getRot(fcObj)
        rotate += "translate <" + str(x1) + "," + str(y1) + "," + str(z1) + ">\n"

        povBox += pigment
        povBox += rotate
        povBox += "\n}\n\n"
        povCode = povBox
        #App.Console.PrintMessage(povBox)

    elif fcObj.TypeId == "Part::Sphere": # Sphere
        x = fcObj.Placement.Base.x
        z = fcObj.Placement.Base.y
        y = fcObj.Placement.Base.z
        radius = int(fcObj.Radius)

        povSphere = "sphere{ <"
        povSphere += str(x) + "," + str(y) + "," + str(z) + "> " + str(radius)
        pigment = "\npigment{color rgb<1,0.6,0>}\n"
        povSphere += pigment
        povSphere += "\n}"
        povCode = povSphere

    elif fcObj.TypeId == "Part::Cut":  #Cut
        childs = fcObj.OutList
        povCut = "difference{"
        for child in childs:
            povCut += createPovrayCode(child)

        povCut += "}"
        povCode = povCut

    elif fcObj.TypeId == "Part::MultiFuse": #Fusion
        childs = fcObj.OutList
        povFusion = "union{"
        for child in childs:
            povFusion += createPovrayCode(child)

        povFusion += "}"
        povCode = povFusion

    elif fcObj.TypeId == "Part::MultiCommon": #Common
        childs = fcObj.OutList
        povCommon = "intersection{"
        for child in childs:
            povCommon += createPovrayCode(child)

        povCommon += "}"
        povCode = povCommon

    return povCode

def getRot(fcObj):
    eulerRot = fcObj.Placement.Rotation.toEuler()
    App.Console.PrintMessage(str(eulerRot) + "\n")
    eulerRot = [eulerRot[2], eulerRot[0], eulerRot[1]] #convert axis to povray axis
    rotX = -eulerRot[0]
    rotY = -eulerRot[1]
    rotZ = -eulerRot[2]
    App.Console.PrintMessage(str(rotX) + "\n" + str(rotY) + "\n" + str(rotZ) + "\n")

    rotate = "\nrotate <" + str(rotX) + "," + str(rotY) + "," + str(rotZ) + ">\n"

    return rotate

def writeFile(povText):
    fileName = getFileName()
    if fileName != -1:
        file = open(fileName, "w")
        file.write(povText)
        file.close()

def getFileName():
    fileName = QtGui.QFileDialog.getSaveFileName(None, 'Select path and name of the *.pov file', '/home/otto/Dokumente', "PovRay Files (*.pov)")
    if fileName:
        App.Console.PrintMessage(str(fileName[0]) + "\n\n")
        return str(fileName[0])
    else:
        return -1


main()
