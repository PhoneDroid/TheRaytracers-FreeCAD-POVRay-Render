# -*- coding: utf-8 -*-

from PySide import QtGui
from FreeCAD import Base
import os
from PySide import QtCore, QtGui
import math

DefaultShapeColor =  App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('DefaultShapeColor')

def startExport(povPath, width, height, repRot, expFcView):
    firstLayer = []
    doc = FreeCAD.ActiveDocument
    objs = doc.Objects

    finalPovCode = "#version 3.6; // 3.7\nglobal_settings{assumed_gamma 1.0}\n#default{ finish{ ambient 0.2 diffuse 0.9 }}\n"

    finalPovCode += "#default{pigment{rgb "+ uintColorToRGB(DefaultShapeColor) + "}}\n"

    finalPovCode += "//------------------------------------------\n"
    finalPovCode += "#include \"colors.inc\"\n#include \"textures.inc\"\n"

    fileName = povPath

    if fileName != -1 and fileName != "" and fileName != " ":
        try:
            file = open(fileName, "w+")
            file.close()
            App.Console.PrintMessage("\n\nPath to pov File: " + fileName + "\n")
        except:
            App.Console.PrintError("Can't open the pov file\n\n")
            return -1

        incPath = fileName[:-3] + "inc"

        try:
            file = open(incPath, "r")
            incContent = file.read()
            file.close()
            finalPovCode += "\n#include \"" + incPath + "\"\n"
            App.Console.PrintMessage("Content of the inc file:\n" + incContent + "\n\n")
        except:
            incContent = ""
    else:
        App.Console.PrintMessage("\n\nCanceled\n\n")
        return -1

    finalPovCode += "//------------------------------------------\n"
    finalPovCode += "// camera ----------------------------------\n"

    CamOri = Gui.ActiveDocument.ActiveView.getCameraOrientation()
    EulerCam = CamOri.toEuler()

    CamPos = Gui.ActiveDocument.ActiveView.viewPosition()

    PovCam="camera {\n"
    PovCam += "     location <0, 0, 0>\n"
    PovCam += "     direction < 0, 1, 0>\n"
    PovCam += "     up    < 0, 0, 1>\n"
    PovCam += "     right   < 1.33, 0, 0>\n"
    PovCam += "     rotate <" + str(EulerCam[2]-90) + ", " + str(EulerCam[1]) + ", " + str(EulerCam[0]) + ">\n"
    PovCam += "     translate <" + str(CamPos.Base.x) + ", " + str(CamPos.Base.y) + ", " + str(CamPos.Base.z) + ">\n"
    PovCam += "     angle 55\n"
    PovCam += "    }\n"
    finalPovCode += PovCam

    finalPovCode += "// sun -------------------------------------\n"
    #finalPovCode += "light_source{<1500,3000,-2500> color rgb<1,1,1>}\n"
    finalPovCode += "light_source{<" + str(CamPos.Base.x) + ", " + str(CamPos.Base.y) + ", " + str(CamPos.Base.z) + "> color rgb<0.5,0.5,0.5>}\n"

    bgColor1 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor')
    bgColor2 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor2')
    bgColor3 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor3')
    bgColor4 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor4')

    finalPovCode += "// background ------------------------------\n"
    finalPovCode += "sky_sphere {\n  pigment {\n"

    if App.ParamGet("User parameter:BaseApp/Preferences/View").GetBool('Simple'):
        finalPovCode += " color rgb" + uintColorToRGB(bgColor1)

    elif App.ParamGet("User parameter:BaseApp/Preferences/View").GetBool('Gradient'):
        finalPovCode += "   gradient z\n"
        finalPovCode += "   color_map {\n"
        finalPovCode += "        [ 0.00  color rgb" + uintColorToRGB(bgColor3) +" ]\n"
        finalPovCode += "        [ 0.20  color rgb" + uintColorToRGB(bgColor3) +" ]\n"
        if App.ParamGet("User parameter:BaseApp/Preferences/View").GetBool('UseBackgroundColorMid'):
            finalPovCode += "        [ 0.50  color rgb" + uintColorToRGB(bgColor4) +" ]\n"
        finalPovCode += "        [ 0.60  color rgb" + uintColorToRGB(bgColor2) +" ]\n"
        finalPovCode += "        [ 1.00  color rgb" + uintColorToRGB(bgColor2) +" ]\n"
        finalPovCode += "       }\n"
        finalPovCode += "   scale 2\n"
        finalPovCode += "   translate -1\n"
        finalPovCode += "   rotate<" + str(EulerCam[2]-90) + ", " + str(EulerCam[1]) + ", " + str(EulerCam[0]) + ">\n"


    finalPovCode += "   }\n}\n"
    #emission rgb <0.8,0.8,1>
    finalPovCode += "//------------------------------------------\n"
    finalPovCode += "// objects in scene ------------------------\n"

    noCSG = False
    supportedObjs = ["Part::Sphere", "Part::Box", "Part::Torus", "Part::Cylinder", "Part::Cone", "Part::Ellipsoid", "Part::Cut", "Part::MultiFuse", "Part::Fuse", "Part::MultiCommon", "Part::Common"]
    #print informations about the objects
    App.Console.PrintMessage("The object model:\n")
    for obj in objs:
        if not obj.TypeId in supportedObjs :
            noCSG = True
        App.Console.PrintMessage(str(obj.TypeId) + " - ")
        App.Console.PrintMessage(str(obj.Name) + "\n")
        for child in obj.OutList:
            App.Console.PrintMessage("Childs\n")
            App.Console.PrintMessage("   - " + str(child.TypeId) + " - ")
            App.Console.PrintMessage(str(child.Name) + "\n")
        for parent in obj.InList:
            App.Console.PrintMessage("Parent\n")
            App.Console.PrintMessage("   -" + str(parent.TypeId) + " - ")
            App.Console.PrintMessage("   -" + str(parent.Name) + "\n\n\n")

    App.Console.PrintMessage("\n\n")

    if noCSG == True:
        showWarning("Your model contains objects which aren't from the part workbench. The macro won't render this parts.")

    #repair rotation
    if repRot:
        repairRot(objs)

    #export FreeCAD view
    if expFcView:
        exportFcView(fileName[:-4] + "_FC-View.png")

    #get the first layer
    for obj in objs:
        if obj.InList == []: #no parents
            firstLayer.append(obj)

    #create the povray code
    for obj in firstLayer:
        finalPovCode += createPovrayCode(obj, incContent)

    App.Console.PrintMessage("The final code for POVray:\n" + finalPovCode + "\n\n")
    writeFile(finalPovCode, fileName)
    openPovRay(fileName, width, height)

    App.Console.PrintMessage("\nDone\n")

def createPovrayCode(fcObj, incContent): #returns the povray code for the object
    povCode = "\n//----- " + stringCorrection(fcObj.Label) + " -----"

    if fcObj.TypeId == "Part::Box": #Box
        povBox = "\nbox{ <0,0,0>, <" + str(float(fcObj.Length)) + ", " + str(float(fcObj.Width)) + ", " + str(float(fcObj.Height)) + ">"
        povCode += povBox

    elif fcObj.TypeId == "Part::Sphere": # Sphere
        radius = int(fcObj.Radius)

        povSphere = "\nsphere { <0, 0, 0> " + str(radius)

        povCode += povSphere

    elif fcObj.TypeId == "Part::Ellipsoid": # Ellipsoid
        r1 = fcObj.Radius1.getValueAs("mm").Value
        r2 = fcObj.Radius2.getValueAs("mm").Value
        r3 = fcObj.Radius3.getValueAs("mm").Value

        povSphere = "\nsphere { <0, 0, 0> 1\n"

        povSphere += "    scale <" + str(r2) + ", " + str(r3) + ", " + str(r1) + ">\n"

        povCode += povSphere

    elif fcObj.TypeId == "Part::Cone": #Cone
        r1 = fcObj.Radius1.getValueAs("mm").Value
        c1 = "<0, 0, 0>"
        r2 = fcObj.Radius2.getValueAs("mm").Value
        c2 = "<0, 0, " + str(fcObj.Height.getValueAs("mm").Value) + ">"

        povCone = "\ncone { "
        povCone += c1 + ", " + str(r1) + "\n    "
        povCone += c2 + ", " + str(r2) + "\n"

        povCode += povCone

    elif fcObj.TypeId == "Part::Cylinder": #Cylinder
        r = fcObj.Radius.getValueAs("mm").Value
        baseP = "<0, 0, 0>"
        CapP = "<0, 0, " + str(fcObj.Height.getValueAs("mm").Value) + ">"

        povCylinder = "\ncylinder { "
        povCylinder += baseP + ", " + CapP + ", " + str(r)

        povCode += povCylinder

    elif fcObj.TypeId == "Part::Torus": #Torus
        r1 = fcObj.Radius1.getValueAs("mm").Value
        r2 = fcObj.Radius2.getValueAs("mm").Value

        povTorus = "\ntorus { "
        povTorus += str(r1) + ", " + str(r2)

        povCode += povTorus

    elif fcObj.TypeId == "Part::Cut":  #Cut
        childs = fcObj.OutList
        povCut = "\ndifference {\n"
        for child in childs:
            childCode = createPovrayCode(child, incContent)
            povCut += childCode.replace("\n", "\n    ");

        povCode += povCut

    elif fcObj.TypeId == "Part::MultiFuse" or fcObj.TypeId == "Part::Fuse": #Fusion
        childs = fcObj.OutList
        povFusion = "\nunion {\n"
        for child in childs:
            childCode = createPovrayCode(child, incContent)
            povFusion += childCode.replace("\n", "\n    ");

        povCode += povFusion

    elif fcObj.TypeId == "Part::MultiCommon" or fcObj.TypeId == "Part::Common": #Common
        childs = fcObj.OutList
        povCommon = "\nintersection {\n"
        for child in childs:
            childCode = createPovrayCode(child, incContent)
            povCommon += childCode.replace("\n", "\n    ");

        povCode += povCommon

    else:
        return ""

    povCode += "\n"
    rotation = getRot(fcObj)
    if rotation != "":
        povCode += "    " + rotation + "\n"

    translation = getTranslation(fcObj)
    if translation != "":
        povCode += "    " + getTranslation(fcObj) + "\n"

    pigment = getPigment(fcObj, incContent)
    if pigment != "":
        povCode += "    " + pigment + "\n"

    povCode += "}\n"
    return povCode

def getTranslation(fcObj):
    translation = ""
    x = fcObj.Placement.Base.x
    y = fcObj.Placement.Base.y
    z = fcObj.Placement.Base.z
    if x != 0 or y != 0 or z != 0:
        translation += "translate <" + str(x) + ", " + str(y) + ", " + str(z) + ">"

    return translation

def getRot(fcObj):
    rotate = ""
    eulerRot = fcObj.Placement.Rotation.toEuler()
    x = eulerRot[2]
    y = eulerRot[1]
    z = eulerRot[0]

    if fcObj.TypeId == "Part::Torus":
        x += 90

    if x != 0 or y != 0 or z != 0:
        rotate = "rotate <" + str(x) + ", " + str(y)+ ", "  + str(z) + ">"

    return rotate

def getPigment(fcObj, incContent):
    appObject = FreeCADGui.ActiveDocument.getObject(fcObj.Name)
    material = ""
    pigment = ""
    transparency = ""
    finish = ""
    ambient = ""
    emission = ""
    phong = ""
    if appObject.Transparency != 0:
        transparency += " filter " + str(appObject.Transparency / float(100))
    ShapeColorRGB = "<{0:1.3f}, {1:1.3f}, {2:1.3f}>".format(appObject.ShapeColor[0],appObject.ShapeColor[1],appObject.ShapeColor[2])
    if transparency != "" or ShapeColorRGB != uintColorToRGB(DefaultShapeColor):
        pigment += "pigment{color rgb" + ShapeColorRGB + transparency + "}\n"
    material += pigment
    if appObject.ShapeMaterial.AmbientColor != (0.20000000298023224,0.20000000298023224,0.20000000298023224,0):
        ambient += "ambient rgb<"
        ambient += "{0:1.3f}, {1:1.3f}, {2:1.3f}".format(appObject.ShapeMaterial.AmbientColor[0],appObject.ShapeMaterial.AmbientColor[1],appObject.ShapeMaterial.AmbientColor[2])
        ambient += "> "
    if appObject.ShapeMaterial.EmissiveColor != (0,0,0,0):
        emission += "emission rgb<"
        emission += "{0:1.3f}, {1:1.3f}, {2:1.3f}".format(appObject.ShapeMaterial.EmissiveColor[0],appObject.ShapeMaterial.EmissiveColor[1],appObject.ShapeMaterial.EmissiveColor[2])
        emission += "> "
    if appObject.ShapeMaterial.SpecularColor != (0,0,0,0):
        phong += "phong "
        phong += "{0:1.2f}".format((appObject.ShapeMaterial.SpecularColor[0]+appObject.ShapeMaterial.SpecularColor[1]+appObject.ShapeMaterial.SpecularColor[2])/3)
        phong += " phong_size "
        phong += str(appObject.ShapeMaterial.Shininess * 50)
        phong += " "
    if ambient != "" or emission != "" or  phong != "":
        finish = "finish {"
        finish += ambient
        finish += emission
        finish += phong
        finish += "}\n"
    material += finish
    if incContent.find("#declare " + fcObj.Label + "_material") != -1:
        material = "\nmaterial {" + fcObj.Label + "_material}\n"
    return material

def uintColorToRGB(uintColor):
    Blue = (uintColor >> 8) & 255
    Green = (uintColor >> 16) & 255
    Red = (uintColor >> 24) & 255
    rgbString = "<{0:1.3f}, {1:1.3f}, {2:1.3f}>".format(Red/float(255),Green/float(255),Blue/float(255))
    return rgbString

def writeFile(povText, fileName):
    try:
        file = open(fileName, "w+")
        file.write(povText)
        file.close()
    except:
        return -1

def openPovRay(path, width, height):
    terminalInput = "povray " + str(path) + " +P Width=" + str(width) + " Height=" + str(height)
    os.system(terminalInput)

def showWarning(msg):
    # First argument is the icon used: QtGui.QMessageBox.{NoIcon, Information, Warning, Critical, Question}
    dialog = QtGui.QMessageBox(QtGui.QMessageBox.Warning, "Warning", msg)
    dialog.setWindowModality(QtCore.Qt.ApplicationModal)
    dialog.exec_()

def stringCorrection(inputString):
    utfString = inputString.encode("utf8", "replace")     # conversion from ??? to utf8
    uniString = utfString.decode("utf8", "replace")       # conversion from utf8 to unicode
    uniString = uniString.replace(u"Ä", "AE")           # replacement of german "Umlaute"
    uniString = uniString.replace(u"ä", "ae")
    uniString = uniString.replace(u"Ü", "UE")
    uniString = uniString.replace(u"ü", "ue")
    uniString = uniString.replace(u"Ö", "OE")
    uniString = uniString.replace(u"ö", "oe")
    uniString = uniString.replace(u"ß", "ss")
    uniString = uniString.replace(" ", "_")
    outString = uniString.encode("ASCII", "replace")      # conversio to ASCII for POV-Ray compatibility
    return outString

def repairRot(objs):
    for obj in objs:
        ObjLocation = obj.Placement
        posX = ObjLocation.Base.x
        posY = ObjLocation.Base.y
        posZ = ObjLocation.Base.z
        rotX = ObjLocation.Rotation.Axis[0]
        rotY = ObjLocation.Rotation.Axis[1]
        rotZ = ObjLocation.Rotation.Axis[2]
        rotAngle = math.degrees(ObjLocation.Rotation.Angle)
        obj.Placement = App.Placement(App.Vector(posX, posY, posZ), App.Rotation(App.Vector(rotX, rotY, rotZ), rotAngle), App.Vector(0, 0, 0))

def exportFcView(path):
    Gui.ActiveDocument.ActiveView.saveImage(path)

def isAscii(string):
    return all(ord(c) < 128 for c in string)

class GUI(QtGui.QDialog):
    def __init__(self):
        super(GUI, self).__init__()
        self.initUI()
        self.setDefaultValues()

    def initUI(self):
        self.setWindowTitle("Export to POVray")

        #pov file selection
        self.pathLineEdit = QtGui.QLineEdit()
        self.pathLineEdit.setPlaceholderText("Path to .pov file")
        self.pathLineEdit.setFixedWidth(300)
        self.pathLineEdit.textChanged.connect(self.checkPath)

        self.openFileDialogButton = QtGui.QPushButton('Open pov File')
        self.openFileDialogButton.clicked.connect(self.openFileDialog)

        self.warnLabel = QtGui.QLabel("")
        self.warnLabel.setStyleSheet("QLabel { color : #ff0000; }")

        self.horizLayout1 = QtGui.QGridLayout()
        self.horizLayout1.addWidget(self.pathLineEdit, 0, 0)
        self.horizLayout1.addWidget(self.openFileDialogButton, 0, 1)
        self.horizLayout1.addWidget(self.warnLabel, 1, 0, 1, 2)

        self.pathGroup = QtGui.QGroupBox(".pov File Selection")
        self.pathGroup.setLayout(self.horizLayout1)

        #Width & Height of rendered image
        self.imageWidthLabel = QtGui.QLabel("Width")
        self.imageWidth = QtGui.QSpinBox()
        self.imageWidth.setMinimum(1)
        self.imageWidth.setMaximum(999999)
        self.imageWidth.setSuffix(" px")
        self.imageWidth.setValue(800)
        self.imageHeightLabel = QtGui.QLabel("Height")
        self.imageHeight = QtGui.QSpinBox()
        self.imageHeight.setMinimum(1)
        self.imageHeight.setMaximum(999999)
        self.imageHeight.setSuffix(" px")
        self.imageHeight.setValue(600)

        self.vertLayout1 = QtGui.QVBoxLayout()
        self.vertLayout1.addWidget(self.imageWidthLabel)
        self.vertLayout1.addWidget(self.imageWidth)
        self.vertLayout1.addWidget(self.imageHeightLabel)
        self.vertLayout1.addWidget(self.imageHeight)
        self.WHImageGroup = QtGui.QGroupBox("Width and Height of Image")
        self.WHImageGroup.setLayout(self.vertLayout1)

        #Options
        self.repRot = QtGui.QCheckBox("Repair Rotation")
        self.expFcView = QtGui.QCheckBox("Export FreeCAD View")

        self.vertLayout2 = QtGui.QVBoxLayout()
        self.vertLayout2.addWidget(self.repRot)
        self.vertLayout2.addWidget(self.expFcView)
        self.optionGroups = QtGui.QGroupBox("Options")
        self.optionGroups.setLayout(self.vertLayout2)

        self.cancelButton = QtGui.QPushButton('Cancel')
        self.cancelButton.clicked.connect(self.onCancel)

        self.okButton = QtGui.QPushButton('OK')
        self.okButton.clicked.connect(self.onOk)
        self.okButton.setAutoDefault(True)

        self.mainLayout = QtGui.QVBoxLayout()
        self.mainLayout.addWidget(self.pathGroup)
        self.mainLayout.addWidget(self.WHImageGroup)
        self.mainLayout.addWidget(self.optionGroups)
        self.mainLayout.addWidget(self.cancelButton)
        self.mainLayout.addWidget(self.okButton)

        #create macro group
        self.macroGroup = QtGui.QGroupBox("")
        self.macroGroup.setLayout(self.mainLayout)

        #crate help group
        self.helpLabel = QtGui.QLabel("")

        #create tabs
        self.tabs = QtGui.QTabWidget(self)
        self.tabs.addTab(self.macroGroup, "Macro")
        self.tabs.addTab(self.helpLabel, "Help")

        self.wrapLayout = QtGui.QVBoxLayout()
        self.wrapLayout.addWidget(self.tabs)
        self.setLayout(self.wrapLayout)
        self.show()

    def setDefaultValues(self):
        try:
            file = open("/home/otto/Downloads/povTest.pov", "w")
            defaultPath = "/home/otto/Downloads/povTest.pov"
        except:
            try:
                file = open("/home/andreas/FreeCAD-POV/povTest.pov", "w")
                defaultPath = "/home/andreas/FreeCAD-POV/povTest.pov"
            except:
                defaultPath = "/home/"
        file.close()
        self.pathLineEdit.setText(defaultPath)

        helpText = """<h3>Pov File Selection</h3>
        Select the pov file by type the path into the text field or click on the 'Open pov File' button and select the name of the pov file
        <h3>Width and Height of the Image</h3>
        Select the width and height of the rendered image in pixels
        <h3>Options</h3>
        <h5>Repair Rotation</h5>
        FreeCAD has a bug, so it can be, that some objects of your model has a false rotation!\nWe hope the FreeCAD team fix this bug soon.
        <h5>Export FreeCAD View</h5>
        Export the current view in FreeCAD like with Tools/Save Picture…
        <br><br><br>
        For more information look in our <a href='https://gitlab.com/usbhub/exporttopovray/blob/master/doc/index.md'>Wiki</a>"""
        self.helpLabel.setText(helpText)

    def openFileDialog(self):
        try:
            file = open("/home/otto/Downloads/povTest.pov", "w")
            defaultPath = "/home/otto/Downloads/povTest.pov"
        except:
            try:
                file = open("/home/andreas/FreeCAD-POV/povTest.pov", "w")
                defaultPath = "/home/andreas/FreeCAD-POV/povTest.pov"
            except:
                defaultPath = "/home/"
        file.close()

        fileName = QtGui.QFileDialog.getSaveFileName(None, 'Select path and name of the *.pov file', defaultPath, "PovRay Files (*.pov)")

        if fileName:
            self.pathLineEdit.setText(str(fileName[0]))

    def checkPath(self, path):
        #App.Console.PrintWarning(path)
        if path.find(" ") == -1 and isAscii(path) == True:
            self.okButton.setEnabled(True)
            self.warnLabel.setText("")
        else:
            self.okButton.setEnabled(False)
            self.warnLabel.setText("Your Path contains a space or a mutated vowel")

    def onCancel(self):
        self.result = "Canceled"
        self.close()
        App.PrintMessage("\n\nCanceled\n\n")

    def onOk(self):
        self.result = "OK"
        self.close()
        startExport(self.pathLineEdit.text(), self.imageWidth.value(), self.imageHeight.value(), self.repRot.isChecked(), self.expFcView.isChecked())

dialog = GUI()
dialog.exec_()
