from PySide import QtGui
from FreeCAD import Base
import os
from PySide import QtCore, QtGui


def main():
    showWarning("FreeCAD has a bug, so it can be, that some objects of your model has a false rotation!\nWe hope the FreeCAD team fix this bug soon.")

    firstLayer = []
    doc = FreeCAD.ActiveDocument
    objs = doc.Objects

    finalPovCode = "#version 3.6; // 3.7\nglobal_settings{assumed_gamma 1.0}\n#default{ finish{ ambient 0.2 diffuse 0.9 }}\n"
    finalPovCode += "//------------------------------------------\n"
    finalPovCode += "#include \"colors.inc\"\n#include \"textures.inc\"\n"

    fileName = getFileName()
    if fileName != -1:
        try:
            file = open(fileName, "r")
            file.close()
        except:
            return -1

        incPath = fileName[:-3] + "inc"

        try:
            file = open(incPath, "r")
            incContent = file.read()
            file.close()
            finalPovCode += "\n#include \"" + incPath + "\"\n"
        except:
            incContent = ""

        App.Console.PrintMessage(incContent)
    else:
        return -1

    finalPovCode += "//------------------------------------------\n"
    finalPovCode += "// camera ----------------------------------\n"

    CamOri = Gui.ActiveDocument.ActiveView.getCameraOrientation()
    EulerCam = CamOri.toEuler()

    CamPos = Gui.ActiveDocument.ActiveView.viewPosition()

    PovCam="camera {\n"
    PovCam += "     location <0, 0, 0>\n"
    PovCam += "     direction < 0, 1, 0>\n"
    PovCam += "     up    < 0, 0, 1>\n"
    PovCam += "     right   < 1.33, 0, 0>\n"
    PovCam += "     rotate <" + str(EulerCam[2]-90) + ", " + str(EulerCam[1]) + ", " + str(EulerCam[0]) + ">\n"
    PovCam += "     translate <" + str(CamPos.Base.x) + ", " + str(CamPos.Base.y) + ", " + str(CamPos.Base.z) + ">\n"
    PovCam += "     angle 55\n"
    PovCam += "    }\n"
    finalPovCode += PovCam

    finalPovCode += "// sun -------------------------------------\n"
    #finalPovCode += "light_source{<1500,3000,-2500> color rgb<1,1,1>}\n"
    finalPovCode += "light_source{<" + str(CamPos.Base.x) + ", " + str(CamPos.Base.y) + ", " + str(CamPos.Base.z) + "> color rgb<0.5,0.5,0.5>}\n"

    bgColor1 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor')
    bgColor2 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor2')
    bgColor3 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor3')
    bgColor4 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor4')

    finalPovCode += "// background ------------------------------\n"
    finalPovCode += "sky_sphere {\n  pigment {\n"

    if App.ParamGet("User parameter:BaseApp/Preferences/View").GetBool('Simple'):
        finalPovCode += " color rgb" + uintColorToRGB(bgColor1)

    elif App.ParamGet("User parameter:BaseApp/Preferences/View").GetBool('Gradient'):
        finalPovCode += "   gradient z\n"
        finalPovCode += "   color_map {\n"
        finalPovCode += "        [ 0.00  color rgb" + uintColorToRGB(bgColor3) +" ]\n"
        finalPovCode += "        [ 0.20  color rgb" + uintColorToRGB(bgColor3) +" ]\n"
        if App.ParamGet("User parameter:BaseApp/Preferences/View").GetBool('UseBackgroundColorMid'):
            finalPovCode += "        [ 0.50  color rgb" + uintColorToRGB(bgColor4) +" ]\n"
        finalPovCode += "        [ 0.60  color rgb" + uintColorToRGB(bgColor2) +" ]\n"
        finalPovCode += "        [ 1.00  color rgb" + uintColorToRGB(bgColor2) +" ]\n"
        finalPovCode += "       }\n"
        finalPovCode += "   scale 2\n"
        finalPovCode += "   translate -1\n"
        finalPovCode += "   rotate<" + str(EulerCam[2]-90) + ", " + str(EulerCam[1]) + ", " + str(EulerCam[0]) + ">\n"


    finalPovCode += "   }\n}\n"
    #emission rgb <0.8,0.8,1>
    finalPovCode += "//------------------------------------------\n"
    finalPovCode += "// objects in scene ------------------------\n"

    noCSG = False
    supportedObjs = ["Part::Sphere", "Part::Box", "Part::Torus", "Part::Cylinder", "Part::Cone", "Part::Ellipsoid", "Part::Cut", "Part::MultiFuse", "Part::Fuse", "Part::MultiCommon", "Part::Common"]
    #print informations about the objects
    for obj in objs:
        if not obj.TypeId in supportedObjs :
            noCSG = True
        App.Console.PrintMessage(str(obj.TypeId) + " - ")
        App.Console.PrintMessage(str(obj.Name) + "\n")
        for child in obj.OutList:
            App.Console.PrintMessage("Childs\n")
            App.Console.PrintMessage("   - " + str(child.TypeId) + " - ")
            App.Console.PrintMessage(str(child.Name) + "\n")
        for parent in obj.InList:
            App.Console.PrintMessage("Parent\n")
            App.Console.PrintMessage("   -" + str(parent.TypeId) + " - ")
            App.Console.PrintMessage("   -" + str(parent.Name) + "\n\n\n")

    if noCSG == True:
        showWarning("Your model contains objects which aren't from the part workbench. The macro won't render this parts.")

    #get the first layer
    for obj in objs:
        if obj.InList == []: #no parents
            firstLayer.append(obj)

    #create the povray code
    for obj in firstLayer:
        finalPovCode += createPovrayCode(obj, incContent)

    #App.Console.PrintMessage("\n\n" + str(firstLayer[0].TypeId) + "\n\n")
    App.Console.PrintMessage("\n\n" + finalPovCode)
    writeFile(finalPovCode, fileName)

    App.Console.PrintMessage("\n\n\nDone")

def createPovrayCode(fcObj, incContent): #returns the povray code for the object
    povCode = ""

    if fcObj.TypeId == "Part::Box": #Box
        povBox = "box{ <0,0,0>, <" + str(float(fcObj.Length)) + ", " + str(float(fcObj.Width)) + ", " + str(float(fcObj.Height)) + ">\n"
        povCode = povBox

    elif fcObj.TypeId == "Part::Sphere": # Sphere
        radius = int(fcObj.Radius)

        povSphere = "sphere { <0, 0, 0> " + str(radius) + "\n"

        povCode = povSphere

    elif fcObj.TypeId == "Part::Ellipsoid": # Ellipsoid
        r1 = fcObj.Radius1.getValueAs("mm").Value
        r2 = fcObj.Radius2.getValueAs("mm").Value
        r3 = fcObj.Radius3.getValueAs("mm").Value

        povSphere = "sphere { <0, 0, 0> 1\n"

        povSphere += "scale <" + str(r2) + ", " + str(r3) + ", " + str(r1) + ">\n\n"

        povCode = povSphere

    elif fcObj.TypeId == "Part::Cone": #Cone
        r1 = fcObj.Radius1.getValueAs("mm").Value
        c1 = "<0, 0, 0>"
        r2 = fcObj.Radius2.getValueAs("mm").Value
        c2 = "<0, 0, " + str(fcObj.Height.getValueAs("mm").Value) + ">"

        povCone = "cone {"
        povCone += c1 + ", " + str(r1) + "\n"
        povCone += c2 + ", " + str(r2) + "\n\n"

        povCode += povCone

    elif fcObj.TypeId == "Part::Cylinder": #Cylinder
        r = fcObj.Radius.getValueAs("mm").Value
        baseP = "<0, 0, 0>"
        CapP = "<0, 0, " + str(fcObj.Height.getValueAs("mm").Value) + ">"

        povCylinder = "cylinder {"
        povCylinder += baseP + ", " + CapP + ", " + str(r) + "\n"

        povCode += povCylinder

    elif fcObj.TypeId == "Part::Torus": #Torus
        r1 = fcObj.Radius1.getValueAs("mm").Value
        r2 = fcObj.Radius2.getValueAs("mm").Value

        povTorus = "torus {"
        povTorus += str(r1) + ", " + str(r2) + "\n"

        povCode += povTorus

    elif fcObj.TypeId == "Part::Cut":  #Cut
        childs = fcObj.OutList
        povCut = "difference {\n"
        for child in childs:
            povCut += createPovrayCode(child, incContent)

        povCode = povCut

    elif fcObj.TypeId == "Part::MultiFuse" or fcObj.TypeId == "Part::Fuse": #Fusion
        childs = fcObj.OutList
        povFusion = "union {\n"
        for child in childs:
            povFusion += createPovrayCode(child, incContent)

        povCode = povFusion

    elif fcObj.TypeId == "Part::MultiCommon" or fcObj.TypeId == "Part::Common": #Common
        childs = fcObj.OutList
        povCommon = "intersection {\n"
        for child in childs:
            povCommon += createPovrayCode(child, incContent)

        povCode = povCommon

    povCode += getRot(fcObj) + "\n"
    povCode += getTranslation(fcObj) + "\n"
    povCode += getPigment(fcObj, incContent) + "\n"
    povCode += "}\n\n"
    return povCode

def getTranslation(fcObj):
    x = fcObj.Placement.Base.x
    y = fcObj.Placement.Base.y
    z = fcObj.Placement.Base.z
    translation = "translate <" + str(x) + ", " + str(y) + ", " + str(z) + ">"

    return translation

def getRot(fcObj):
    eulerRot = fcObj.Placement.Rotation.toEuler()
    rotate = ""
    if fcObj.TypeId != "Part::Torus":
        if eulerRot[0] != 0 or eulerRot[1] != 0 or eulerRot[2] != 0:
            rotate = "rotate <" + str(eulerRot[2]) + ", " + str(eulerRot[1])+ ", "  + str(eulerRot[0]) + ">"
    else:
        if eulerRot[0] != 0 or eulerRot[1] != 0 or (eulerRot[2] != 90 and eulerRot[2] != 89.99999999999999):
            rotate = "rotate <" + str(eulerRot[2] + 90) + ", " + str(eulerRot[1])+ ", "  + str(eulerRot[0]) + ">"
    return rotate

def getPigment(fcObj, incContent):
    appObject = FreeCADGui.ActiveDocument.getObject(fcObj.Name)
    material = ""
    transparency = ""
    finish = ""
    ambient = ""
    emission = ""
    phong = ""
    if appObject.Transparency != 0:
        transparency += " filter " + str(appObject.Transparency / float(100))
    pigment = "\npigment{color rgb<"
    pigment += "{0:1.3f}, {1:1.3f}, {2:1.3f}".format(appObject.ShapeColor[0],appObject.ShapeColor[1],appObject.ShapeColor[2])
    pigment += ">" + transparency + "}\n"
    material += pigment
    if appObject.ShapeMaterial.AmbientColor != (0.20000000298023224,0.20000000298023224,0.20000000298023224,0):
        ambient += "ambient rgb<"
        ambient += "{0:1.3f}, {1:1.3f}, {2:1.3f}".format(appObject.ShapeMaterial.AmbientColor[0],appObject.ShapeMaterial.AmbientColor[1],appObject.ShapeMaterial.AmbientColor[2])
        ambient += "> "
    if appObject.ShapeMaterial.EmissiveColor != (0,0,0,0):
        emission += "emission rgb<"
        emission += "{0:1.3f}, {1:1.3f}, {2:1.3f}".format(appObject.ShapeMaterial.EmissiveColor[0],appObject.ShapeMaterial.EmissiveColor[1],appObject.ShapeMaterial.EmissiveColor[2])
        emission += "> "
    if appObject.ShapeMaterial.SpecularColor != (0,0,0,0):
        phong += "phong "
        phong += "{0:1.2f}".format((appObject.ShapeMaterial.SpecularColor[0]+appObject.ShapeMaterial.SpecularColor[1]+appObject.ShapeMaterial.SpecularColor[2])/3)
        phong += " phong_size "
        phong += str(appObject.ShapeMaterial.Shininess * 50)
        phong += " "
    if ambient != "" or emission != "" or  phong != "":
        finish = "finish {"
        finish += ambient
        finish += emission
        finish += phong
        finish += "}\n"
    material += finish
    if incContent.find("#declare " + fcObj.Label + "_material") != -1:
        material = "\nmaterial {" + fcObj.Label + "_material}\n"
    return material

def uintColorToRGB(uintColor):
    Blue = (uintColor >> 8) & 255
    Green = (uintColor >> 16) & 255
    Red = (uintColor >> 24) & 255
    rgbString = "<{0:1.3f},{1:1.3f},{2:1.3f}>".format(Red/float(256),Green/float(256),Blue/float(256))
    return rgbString

def writeFile(povText, fileName):
    try:
        file = open(fileName, "w")
        file.write(povText)
        file.close()
        openPovRay(fileName)
    except:
        return -1

def openPovRay(path):
    os.system("povray " + path + " +P &")

def getFileName():
    try:
        file = open("/home/otto/Downloads/povTest.pov", "w")
        defaultPath = "/home/otto/Downloads/povTest.pov"
    except:
        App.Console.PrintMessage("file: /home/otto/Downloads/povTest.pov - not found")
        try:
            file = open("/home/andreas/FreeCAD-POV/povTest.pov", "w")
            defaultPath = "/home/andreas/FreeCAD-POV/povTest.pov"
        except:
            App.Console.PrintMessage("file: /home/andreas/FreeCAD-POV/povTest.pov - not found")
            defaultPath = "/home/"
    file.close()

    fileName = QtGui.QFileDialog.getSaveFileName(None, 'Select path and name of the *.pov file', defaultPath, "PovRay Files (*.pov)")

    if fileName:
        App.Console.PrintMessage(str(fileName[0]) + "\n\n")
        return str(fileName[0])
    else:
        return -1

def showWarning(msg):
    # First argument is the icon used: QtGui.QMessageBox.{NoIcon, Information, Warning, Critical, Question}
    dialog = QtGui.QMessageBox(QtGui.QMessageBox.Warning, "Warning", msg)
    dialog.setWindowModality(QtCore.Qt.ApplicationModal)
    dialog.exec_()

main()
