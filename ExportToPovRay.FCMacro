from PySide import QtGui
from pivy import coin
from FreeCAD import Base

def main():
    firstLayer = []
    doc = FreeCAD.ActiveDocument
    objs = doc.Objects
    
    finalPovCode = """
    #version 3.6; // 3.7
    global_settings{assumed_gamma 1.0}
    #default{ finish{ ambient 0.1 diffuse 0.9 }}
    //------------------------------------------
    #include "colors.inc"
    #include "textures.inc"
    //------------------------------------------
    // camera ----------------------------------
    """
    
    cam = FreeCADGui.ActiveDocument.ActiveView.getCameraNode()
    rotCamera=Base.Rotation(*cam.orientation.getValue().getValue())
    position=Base.Vector(*cam.position.getValue().getValue())
    distance=cam.focalDistance.getValue()
    vec=rotCamera.multVec(Base.Vector(0,0,-1))
    lookat=position+vec*distance
    
    PovCam="camera {\n"
    PovCam += "     location <" + str(position[0]) + "," + str(position[2]) + "," + str(position[1]) + ">\n"
    PovCam += "     look_at <" + str(lookat[0]) + "," + str(lookat[2]) + "," + str(lookat[1]) + ">\n"
    PovCam += "     angle 55\n"
    PovCam += "    }\n"
    finalPovCode += PovCam
    
    finalPovCode += """
    // sun -------------------------------------
    light_source{<1500,3000,-2500> color White}
    
    // background ------------------------------
    sky_sphere {
      pigment {
        gradient y
          color_map {
            [ 0.5  color CornflowerBlue ]
            [ 1.0  color MidnightBlue ]
            }
        scale 2
        translate -1
        }
       emission rgb <0.8,0.8,1>
      }  
    //------------------------------------------
    // objects in scene ------------------------
    """

    #print informations about the objects
    for obj in objs:
        App.Console.PrintMessage(str(obj.TypeId) + " - ")
        App.Console.PrintMessage(str(obj.Name) + "\n")
        for child in obj.OutList:
            App.Console.PrintMessage("Childs\n")
            App.Console.PrintMessage("   - " + str(child.TypeId) + " - ")
            App.Console.PrintMessage(str(child.Name) + "\n")
        for parent in obj.InList:
            App.Console.PrintMessage("Parent\n")
            App.Console.PrintMessage("   -" + str(parent.TypeId) + " - ")
            App.Console.PrintMessage("   -" + str(parent.Name) + "\n\n\n")

    #get the first layer
    for obj in objs:
        if obj.InList == []: #no parents
            firstLayer.append(obj)

    #create the povray code
    for obj in firstLayer:
        finalPovCode += createPovrayCode(obj)

    #App.Console.PrintMessage("\n\n" + str(firstLayer[0].TypeId) + "\n\n")
    App.Console.PrintMessage("\n\n" + finalPovCode)
    writeFile(finalPovCode)

def createPovrayCode(fcObj): #returns the povray code for the object
    povCode = ""

    if fcObj.TypeId == "Part::Box": #no childs
        x1 = fcObj.Placement.Base.x
        z1 = fcObj.Placement.Base.y
        y1 = fcObj.Placement.Base.z
        x2 = fcObj.Placement.Base.x + int(fcObj.Length)
        z2 = fcObj.Placement.Base.y + int(fcObj.Width)
        y2 = fcObj.Placement.Base.z + int(fcObj.Height)

        povBox = "box{ <"
        povBox += str(x1) + "," + str(y1) + "," + str(z1) + ">, <" + str(x2) + "," + str(y2) + "," + str(z2) + ">\n"
        pigment = """
                    pigment{ checker
                        color rgb<1,1,1>
                        color rgb<1,1,1>*0
                        scale <1.0, 1.0, 1.0> }
                    }\n\n"""
        povBox += pigment;
        povCode = povBox
        #App.Console.PrintMessage(povBox)

    elif fcObj.TypeId == "Part::Sphere":
        x = fcObj.Placement.Base.x
        z = fcObj.Placement.Base.y
        y = fcObj.Placement.Base.z
        radius = int(fcObj.Radius)

        povSphere = "sphere{ <"
        povSphere += str(x) + "," + str(y) + "," + str(z) + "> " + str(radius)
        pigment = "\npigment{color rgb<1,0.6,0>}\n"
        povSphere += pigment
        povSphere += "\n}"
        #App.Console.PrintMessage(povSphere)
        povCode = povSphere

    elif fcObj.TypeId == "Part::Cut":
        childs = fcObj.OutList
        povCut = "difference{"
        for child in childs:
            povCut += createPovrayCode(child)

        povCut += "}"
        povCode = povCut

    elif fcObj.TypeId == "Part::MultiFuse":
        childs = fcObj.OutList
        povFusion = "union{"
        for child in childs:
            povFusion += createPovrayCode(child)

        povFusion += "}"
        povCode = povFusion

    elif fcObj.TypeId == "Part::MultiCommon":
        childs = fcObj.OutList
        povCommon = "intersection{"
        for child in childs:
            povCommon += createPovrayCode(child)

        povCommon += "}"
        povCode = povCommon

    return povCode

def writeFile(povText):
    try:
        file = open("/home/otto/Downloads/povTest.pov", "w")
    except:
        App.Console.PrintMessage("file: /home/otto/Downloads/povTest.pov - not found")
        try:
            file = open("/home/andreas/FreeCAD-POV/povTest.pov", "w")
        except:
            App.Console.PrintMessage("file: /home/andreas/FreeCAD-POV/povTest.pov - not found")
    file.write(povText)
    file.close()

main()
