from PySide import QtGui
#from pivy import coin
from FreeCAD import Base
import os

def main():
    firstLayer = []
    doc = FreeCAD.ActiveDocument
    objs = doc.Objects

    finalPovCode = "#version 3.6; // 3.7\nglobal_settings{assumed_gamma 1.0}\n#default{ finish{ ambient 0.1 diffuse 0.9 }}\n"
    finalPovCode += "//------------------------------------------\n"
    finalPovCode += "#include \"colors.inc\"\n#include \"textures.inc\"\n"

    fileName = getFileName()
    if fileName != -1:
        incPath = fileName.replace(".pov", ".inc")
        file = open(incPath, "r")
        incContent = file.read()
        App.Console.PrintMessage(incContent)
        finalPovCode += "\n#include \"" + incPath + "\"\n"
    else:
        #incContent = ""
        return 0

    finalPovCode += "//------------------------------------------\n"
    finalPovCode += "// camera ----------------------------------\n"

    CamOri = Gui.ActiveDocument.ActiveView.getCameraOrientation()
    EulerCam = CamOri.toEuler()

    CamPos = Gui.ActiveDocument.ActiveView.viewPosition()

    PovCam="camera {\n"
    PovCam += "     location <0, 0, 0>\n"
    PovCam += "     direction < 0, 1, 0>\n"
    PovCam += "     up    < 0, 0, 1>\n"
    PovCam += "     right   < 1.33, 0, 0>\n"
    PovCam += "     rotate <" + str(EulerCam[2]-90) + ", " + str(EulerCam[1]) + ", " + str(EulerCam[0]) + ">\n"
    PovCam += "     translate <" + str(CamPos.Base.x) + ", " + str(CamPos.Base.y) + ", " + str(CamPos.Base.z) + ">\n"
    PovCam += "     angle 55\n"
    PovCam += "    }\n"
    finalPovCode += PovCam

    finalPovCode += "// sun -------------------------------------\n"
    finalPovCode += "light_source{<1500,3000,-2500> color rgb<1,1,1>}\n"

    bgColor1 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor')
    bgColor2 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor2')
    bgColor3 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor3')
    bgColor4 = App.ParamGet("User parameter:BaseApp/Preferences/View").GetUnsigned('BackgroundColor4')

    finalPovCode += "// background ------------------------------\n"
    finalPovCode += "sky_sphere {\n  pigment {\n"

    if App.ParamGet("User parameter:BaseApp/Preferences/View").GetBool('Simple'):
        finalPovCode += " color rgb" + uintColorToRGB(bgColor1)

    elif App.ParamGet("User parameter:BaseApp/Preferences/View").GetBool('Gradient'):
        finalPovCode += "   gradient z\n"
        finalPovCode += "   color_map {\n"
        finalPovCode += "        [ 0.00  color rgb" + uintColorToRGB(bgColor3) +" ]\n"
        finalPovCode += "        [ 0.20  color rgb" + uintColorToRGB(bgColor3) +" ]\n"
        if App.ParamGet("User parameter:BaseApp/Preferences/View").GetBool('UseBackgroundColorMid'):
            finalPovCode += "        [ 0.50  color rgb" + uintColorToRGB(bgColor4) +" ]\n"
        finalPovCode += "        [ 0.60  color rgb" + uintColorToRGB(bgColor2) +" ]\n"
        finalPovCode += "        [ 1.00  color rgb" + uintColorToRGB(bgColor2) +" ]\n"
        finalPovCode += "       }\n"
        finalPovCode += "   scale 2\n"
        finalPovCode += "   translate -1\n"
        finalPovCode += "   rotate<" + str(EulerCam[2]-90) + ", " + str(EulerCam[1]) + ", " + str(EulerCam[0]) + ">\n"


    finalPovCode += "   }\n}\n"
#   emission rgb <0.8,0.8,1>
    finalPovCode += "//------------------------------------------\n"
    finalPovCode += "// objects in scene ------------------------\n"

#print informations about the objects
    for obj in objs:
        App.Console.PrintMessage(str(obj.TypeId) + " - ")
        App.Console.PrintMessage(str(obj.Name) + "\n")
        for child in obj.OutList:
            App.Console.PrintMessage("Childs\n")
            App.Console.PrintMessage("   - " + str(child.TypeId) + " - ")
            App.Console.PrintMessage(str(child.Name) + "\n")
        for parent in obj.InList:
            App.Console.PrintMessage("Parent\n")
            App.Console.PrintMessage("   -" + str(parent.TypeId) + " - ")
            App.Console.PrintMessage("   -" + str(parent.Name) + "\n\n\n")

    #get the first layer
    for obj in objs:
        if obj.InList == []: #no parents
            firstLayer.append(obj)

    #create the povray code
    for obj in firstLayer:
        finalPovCode += createPovrayCode(obj, incContent)

    #App.Console.PrintMessage("\n\n" + str(firstLayer[0].TypeId) + "\n\n")
    App.Console.PrintMessage("\n\n" + finalPovCode)
    writeFile(finalPovCode, fileName)

    App.Console.PrintMessage("Done")

def createPovrayCode(fcObj, incContent): #returns the povray code for the object
    povCode = ""

    if fcObj.TypeId == "Part::Box": #Box
        x1 = fcObj.Placement.Base.x
        z1 = fcObj.Placement.Base.z
        y1 = fcObj.Placement.Base.y
        x2 = fcObj.Placement.Base.x + int(fcObj.Length)
        y2 = fcObj.Placement.Base.y + int(fcObj.Width)
        z2 = fcObj.Placement.Base.z + int(fcObj.Height)

        povBox = "box{ <0,0,0>, <" + str(float(fcObj.Length)) + ", " + str(float(fcObj.Width)) + ", " + str(float(fcObj.Height)) + ">\n"
        povBox += getRot(fcObj)
        povBox += "translate <" + str(x1) + "," + str(y1) + "," + str(z1) + ">\n"
        povBox += getPigment(fcObj, incContent)

        povBox += "\n}\n\n"
        povCode = povBox


    elif fcObj.TypeId == "Part::Sphere": # Sphere
        x = fcObj.Placement.Base.x
        y = fcObj.Placement.Base.y
        z = fcObj.Placement.Base.z
        radius = int(fcObj.Radius)

        povSphere = "sphere{ <"
        povSphere += str(x) + "," + str(y) + "," + str(z) + "> " + str(radius)

        povSphere += getPigment(fcObj, incContent)

        povSphere += "\n}"

        povCode = povSphere

    elif fcObj.TypeId == "Part::Cut":  #Cut
        childs = fcObj.OutList
        povCut = "difference{"
        for child in childs:
            povCut += createPovrayCode(child, incContent)

        povCut += getPigment(fcObj, incContent)

        x = fcObj.Placement.Base.x
        y = fcObj.Placement.Base.y
        z = fcObj.Placement.Base.z
        rotate = getRot(fcObj)
        rotate += "translate <" + str(x) + "," + str(y) + "," + str(z) + ">\n"
        povCut += rotate
        povCut += "}"
        povCode = povCut

    elif fcObj.TypeId == "Part::MultiFuse": #Fusion
        childs = fcObj.OutList
        povFusion = "union{"
        for child in childs:
            povFusion += createPovrayCode(child, incContent)

        povFusion += getPigment(fcObj, incContent)

        x = fcObj.Placement.Base.x
        y = fcObj.Placement.Base.y
        z = fcObj.Placement.Base.z
        rotate = getRot(fcObj)
        rotate += "translate <" + str(x) + "," + str(y) + "," + str(z) + ">\n"

        povFusion += rotate
        povFusion += "}"
        povCode = povFusion

    elif fcObj.TypeId == "Part::MultiCommon": #Common
        childs = fcObj.OutList
        povCommon = "intersection{"
        for child in childs:
            povCommon += createPovrayCode(child, incContent)

        povCommon += getPigment(fcObj, incContent)

        x = fcObj.Placement.Base.x
        y = fcObj.Placement.Base.y
        z = fcObj.Placement.Base.z
        rotate = getRot(fcObj)
        rotate += "translate <" + str(x) + "," + str(y) + "," + str(z) + ">\n"
        povCommon += rotate
        povCommon += "}"
        povCode = povCommon

    return povCode

def getRot(fcObj):
    eulerRot = fcObj.Placement.Rotation.toEuler()
    rotate =""
    if eulerRot[0] != 0 or eulerRot[1] != 0 or eulerRot[2] != 0:
        rotate = "\nrotate <" + str(eulerRot[2]) + ", " + str(eulerRot[1])+ ", "  + str(eulerRot[0]) + ">\n"
    return rotate

def getPigment(fcObj, incContent):
    appObject = FreeCADGui.ActiveDocument.getObject(fcObj.Name)

    if incContent.find("#declare " + fcObj.Label + "_pigment") == -1:
        transparency = ""
        if appObject.Transparency != 0:
            transparency += " filter " + str(appObject.Transparency / float(100))
        pigment = "\npigment{color rgb<"
        pigment += "{0:1.3f},{1:1.3f},{2:1.3f}".format(appObject.ShapeColor[0],appObject.ShapeColor[1],appObject.ShapeColor[2])
        pigment += ">" + transparency + "}\n"
    else:
        pigment = "\npigment {\n" + fcObj.Label + "_pigment\n}\n"

    return pigment

def uintColorToRGB(uintColor):
    Blue = (uintColor >> 8) & 255
    Green = (uintColor >> 16) & 255
    Red = (uintColor >> 24) & 255
    rgbString = "<{0:1.3f},{1:1.3f},{2:1.3f}>".format(Red/float(256),Green/float(256),Blue/float(256))
    return rgbString

def writeFile(povText, fileName):
    if fileName != -1:
        file = open(fileName, "w")
        file.write(povText)
        file.close()
        openPovRay(fileName)

def openPovRay(path):
    os.system("povray " + path + " +P &")


def getFileName(inc = False):
    try:
        file = open("/home/otto/Downloads/povTest.pov", "w")
        defaultPath = "/home/otto/Downloads/povTest.pov"
    except:
        App.Console.PrintMessage("file: /home/otto/Downloads/povTest.pov - not found")
        try:
            file = open("/home/andreas/FreeCAD-POV/povTest.pov", "w")
            defaultPath = "/home/andreas/FreeCAD-POV/povTest.pov"
        except:
            App.Console.PrintMessage("file: /home/andreas/FreeCAD-POV/povTest.pov - not found")
            defaultPath = "/home/"
    file.close()

    if inc == True:
        fileName = QtGui.QFileDialog.getSaveFileName(None, 'Select path and name of the *.inc file', defaultPath, "PovRay Include Files (*.inc)")
    else:
        fileName = QtGui.QFileDialog.getSaveFileName(None, 'Select path and name of the *.pov file', defaultPath, "PovRay Files (*.pov)")

    if fileName:
        App.Console.PrintMessage(str(fileName[0]) + "\n\n")
        return str(fileName[0])
    else:
        return -1


main()
